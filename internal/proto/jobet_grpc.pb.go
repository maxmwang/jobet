// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: internal/proto/jobet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobetClient is the client API for Jobet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobetClient interface {
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeReply, error)
}

type jobetClient struct {
	cc grpc.ClientConnInterface
}

func NewJobetClient(cc grpc.ClientConnInterface) JobetClient {
	return &jobetClient{cc}
}

func (c *jobetClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeReply, error) {
	out := new(ProbeReply)
	err := c.cc.Invoke(ctx, "/Jobet/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobetServer is the server API for Jobet service.
// All implementations must embed UnimplementedJobetServer
// for forward compatibility
type JobetServer interface {
	Probe(context.Context, *ProbeRequest) (*ProbeReply, error)
	mustEmbedUnimplementedJobetServer()
}

// UnimplementedJobetServer must be embedded to have forward compatible implementations.
type UnimplementedJobetServer struct {
}

func (UnimplementedJobetServer) Probe(context.Context, *ProbeRequest) (*ProbeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}
func (UnimplementedJobetServer) mustEmbedUnimplementedJobetServer() {}

// UnsafeJobetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobetServer will
// result in compilation errors.
type UnsafeJobetServer interface {
	mustEmbedUnimplementedJobetServer()
}

func RegisterJobetServer(s grpc.ServiceRegistrar, srv JobetServer) {
	s.RegisterService(&Jobet_ServiceDesc, srv)
}

func _Jobet_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobetServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Jobet/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobetServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobet_ServiceDesc is the grpc.ServiceDesc for Jobet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Jobet",
	HandlerType: (*JobetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Probe",
			Handler:    _Jobet_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/jobet.proto",
}
