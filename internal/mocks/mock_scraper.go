// Code generated by MockGen. DO NOT EDIT.
// Source: internal/scrape/scraper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scrape "github.com/maxmwang/jobet/internal/scrape"
)

// MockScraper is a mock of Scraper interface.
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper.
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance.
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// Scrape mocks base method.
func (m *MockScraper) Scrape(companyName, site string) ([]scrape.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrape", companyName, site)
	ret0, _ := ret[0].([]scrape.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scrape indicates an expected call of Scrape.
func (mr *MockScraperMockRecorder) Scrape(companyName, site interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrape", reflect.TypeOf((*MockScraper)(nil).Scrape), companyName, site)
}

// ScrapeAll mocks base method.
func (m *MockScraper) ScrapeAll(companyName string) ([]scrape.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapeAll", companyName)
	ret0, _ := ret[0].([]scrape.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapeAll indicates an expected call of ScrapeAll.
func (mr *MockScraperMockRecorder) ScrapeAll(companyName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapeAll", reflect.TypeOf((*MockScraper)(nil).ScrapeAll), companyName)
}

// Sites mocks base method.
func (m *MockScraper) Sites() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sites")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Sites indicates an expected call of Sites.
func (mr *MockScraperMockRecorder) Sites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sites", reflect.TypeOf((*MockScraper)(nil).Sites))
}
